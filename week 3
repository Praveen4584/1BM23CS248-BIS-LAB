import random
import numpy as np

# -------------------- Objective Function (TSP) --------------------
def objective_function(tour, distance_matrix):
    # Calculate the total distance for a given tour (path)
    tour_length = 0
    for i in range(len(tour) - 1):
        tour_length += distance_matrix[tour[i]][tour[i + 1]]
    tour_length += distance_matrix[tour[-1]][tour[0]]  # Return to the start point
    return -tour_length  # We return the negative length to maximize fitness (i.e., minimize distance)

# -------------------- Generate Random Chromosome --------------------
def generate_random_chromosome(chromosome_size):
    return random.sample(range(chromosome_size), chromosome_size)

# -------------------- Crossover (Partially Matched Crossover) --------------------
def crossover(parent1, parent2):
    # PMX crossover
    size = len(parent1)
    child1 = [-1] * size
    child2 = [-1] * size

    # Random crossover points
    cxpoint1 = random.randint(0, size // 2)
    cxpoint2 = random.randint(cxpoint1 + 1, size)

    # Copy the slice from parents
    child1[cxpoint1:cxpoint2] = parent1[cxpoint1:cxpoint2]
    child2[cxpoint1:cxpoint2] = parent2[cxpoint1:cxpoint2]

    # Fill remaining positions
    for i in range(size):
        if parent2[i] not in child1:
            child1[child1.index(-1)] = parent2[i]
        if parent1[i] not in child2:
            child2[child2.index(-1)] = parent1[i]

    return child1, child2

# -------------------- Mutation (Swap Mutation) --------------------
def mutate(chromosome, mutation_rate=0.1):
    if random.random() < mutation_rate:
        # Swap two cities in the tour
        i, j = random.sample(range(len(chromosome)), 2)
        chromosome[i], chromosome[j] = chromosome[j], chromosome[i]
    return chromosome

# -------------------- Selection (Tournament Selection) --------------------
def select_parents(fitness_list, population_size):
    # Tournament selection: Select the best individual from a random group
    parents = []
    for _ in range(population_size):
        tournament = random.sample(fitness_list, 2)
        tournament.sort(key=lambda x: x[1], reverse=True)  # Sort by fitness (maximizing)
        parents.append(tournament[0][0])
    return parents

# -------------------- Genetic Algorithm for TSP --------------------
def GEA_Optimization(objective_function, population_size, chromosome_size, distance_matrix, mutation_rate, crossover_rate, generations):
    population = [generate_random_chromosome(chromosome_size) for _ in range(population_size)]

    best_solution = None
    best_fitness = -float('inf')

    # GA loop
    for generation in range(generations):
        fitness_list = []
        for chromosome in population:
            fitness = objective_function(chromosome, distance_matrix)
            fitness_list.append((chromosome, fitness))

            # Update the best solution and fitness
            if fitness > best_fitness:
                best_fitness = fitness
                best_solution = chromosome

        # Select parents using tournament selection
        mating_pool = select_parents(fitness_list, population_size)

        # Generate offspring via crossover and mutation
        offspring = []
        for i in range(0, len(mating_pool), 2):
            parent1 = mating_pool[i]
            parent2 = mating_pool[i + 1]

            # Perform crossover
            if random.random() < crossover_rate:
                child1, child2 = crossover(parent1, parent2)
            else:
                child1, child2 = parent1.copy(), parent2.copy()

            # Apply mutation
            child1 = mutate(child1, mutation_rate)
            child2 = mutate(child2, mutation_rate)

            offspring.append(child1)
            offspring.append(child2)

        # Replace old population with offspring
        population = offspring

        # Print progress every 10 generations
        if generation % 10 == 0:
            print(f"Generation {generation + 1}: Best Fitness = {best_fitness}, Best Solution = {best_solution}")

    return best_solution, best_fitness

# -------------------- Example Usage --------------------
# Define a distance matrix for 4 cities
distance_matrix = np.array([
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
])

# Define parameters for the genetic algorithm
population_size = 50  # Increased population size
chromosome_size = len(distance_matrix)  # Number of cities
mutation_rate = 0.1  # Increased mutation rate
crossover_rate = 0.8  # Increased crossover rate
generations = 100  # Number of generations

# Run the genetic algorithm
best_solution, best_fitness = GEA_Optimization(
    objective_function, 
    population_size, 
    chromosome_size, 
    distance_matrix, 
    mutation_rate, 
    crossover_rate, 
    generations
)

# Output the final best solution
print(f"\nBest Solution Found: {best_solution}")
print(f"Best Fitness (Negative Tour Length): {best_fitness}")
